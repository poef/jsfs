{
  "version": 3,
  "sources": ["../src/Path.js", "../src/FileSystem.js", "../src/Adapters/HttpAdapter.js", "../src/browser.js"],
  "sourcesContent": ["export default class Path {\n    #value;\n\n    constructor(path) {\n        this.#value = Path.collapse(path);\n    }\n\n    get value() {\n        return this.#value;\n    }\n\n    toString() {\n        return this.#value;\n    }\n\n    get length() {\n        return this.#value.length;\n    }\n\n    static collapse(path, cwd='') {\n        if (path instanceof Path) {\n            return path.value;\n        }\n        if (typeof path !== 'string' ) {\n            throw new TypeError('path argument must be a string or an instance of Path');\n        }\n        if (cwd && !(cwd instanceof Path)) {\n            cwd = new Path(cwd);\n        }\n        path = path.trim();\n        if (path.length===0) {\n            return cwd.value;\n        }\n        if (Path.isRelative(path)) {\n            path = cwd+path;\n        }\n        let pathnames = Path.reduce(path, (result, entry) => {\n            if (entry == '..' ) {\n                result.pop();\n            } else if (entry !== '.') {\n                result.push(entry);\n            }\n            return result;\n        }, []);\n        let result = '/';\n        if (pathnames.length) {\n            result += pathnames.join('/');\n            if (Path.isFolder(path)) {\n                result += '/';\n            }\n        }\n        return result;\n    }\n\n    static isAbsolute(path) {\n        if (path instanceof Path) {\n            return true;\n        }\n        return path.length && path[0]==='/';\n    }\n\n    static isRelative(path) {\n        return !Path.isAbsolute(path);    \n    }\n\n    static isFolder(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.length && path[path.length-1] == '/';\n    }\n\n    static isPath(path) {\n        if (path instanceof Path) {\n            return true;\n        }\n        if (typeof path !== 'string') {\n            return false;\n        }\n        path = path.trim();\n        let u = new URL(path, document.location);\n        return u.pathname == path;\n    }\n\n    static reduce(path, reducer, initial) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).reduce(reducer, initial);\n    }\n\n    static map(path, callback) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).map(callback);\n    }\n\n    static parent(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        path = path.split('/').filter(Boolean);\n        path.pop();\n        let result = '/';\n        if (path.length) {\n            result += path.join('/')+'/';\n        }\n        return result;\n    }\n\n    static filename(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).pop();\n    }\n    \n    static head(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).shift();\n    }\n    \n    static tail(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        path = path.split('/').filter(Boolean)\n        path.shift();\n        let result = '/';\n        if (path.length) {\n            result += path.join('/')+'/';\n        }\n        return result;\n    }\n}", "import Path from './Path.js';\n\nexport default class FileSystem {\n\t\n\t#adapter;\n\t#path = '/';\n\n\tconstructor(adapter) {\n\t\tthis.#adapter = adapter\n\t\tthis.#path = this.#adapter.path;\n\t}\n\n\tget path() {\n\t\treturn this.#path;\n\t}\n\n\tcd(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn new FileSystem(this.#adapter.cd(path));\n\t}\n\n\tasync read(path, reader = null) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\tif (typeof reader === 'function') {\n\t\t\tif (!this.#adapter.supportsStreamingRead()) {\n\t\t\t\tthrow new Error('Adapter '+this.#adapter.name+' does not support streaming reading.');\n\t\t\t}\n\t\t\treturn this.#adapter.readStream(path, reader);\n\t\t} else {\n\t\t\treturn this.#adapter.read(path);\n\t\t}\n\t}\n\n\tasync write(path, contents, metadata = null) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\tif (!this.#adapter.supportsWrite()) {\n\t\t\tthrow new Error('Adapter '+this.#adapter.name+' is read only.');\n\t\t}\n\t\tif (typeof contents === 'function') {\n\t\t\tif (!this.#adapter.supportsStreamingWrite()) {\n\t\t\t\tthrow new Error('Adapter '+this.#adapter.name+' does not support streaming writing.');\n\t\t\t}\n\t\t\treturn this.#adapter.writeStream(path, contents, metadata);\n\t\t} else if (typeof contents === 'string') {\n\t\t\treturn this.#adapter.write(path, contents, metadata);\n\t\t} else {\n\t\t\tthrow new TypeError('Cannot write contents of type '+(typeof contents));\n\t\t}\n\t}\n\n\tasync delete(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.delete(path);\n\t}\n\n\tasync exists(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.exists(path);\n\t}\n\n\tasync list(path='') {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.list(path);\n\t}\n}\n\n", "import Path from '../Path.js';\n\nexport default class HttpAdapter {\n    \n    #baseUrl;\n    #path;\n    #exceptionHandler;\n    #fetchParams;\n\n    constructor(baseUrl, path='/', exceptionHandler=null, fetchParams={}) {\n        this.#baseUrl = new URL(baseUrl, window.location.href);\n        this.#path = new Path(path);\n        this.#exceptionHandler = exceptionHandler;\n        this.#fetchParams = fetchParams;\n    }\n\n    get name() {\n        return 'HttpAdapter';\n    }\n\n    get path() {\n        return this.#path;\n    }\n\n    supportsWrite() {\n        return true;\n    }\n\n    supportsStreamingWrite() {\n        return supportsRequestStreams;\n    }\n\n    supportsStreamingRead() {\n        return true;\n    }\n\n    cd(path) {\n        if (!Path.isPath(path)) {\n            throw new TypeError(path+' is not a valid path');\n        }\n        return new HttpAdapter(this.#baseUrl.href, path);\n    }\n\n    //FIXME: return a jsfs result object instead of http response\n    async write(path, contents, metadata=null) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'PUT',\n            body: contents\n        });\n        return this.#fetch(path, params);\n    }\n\n    writeStream(path, writer, metadata=null) {\n        throw new Error('Not yet implemented')\n    }\n\n    async read(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'GET'\n        });\n        let response = await this.#fetch(path, params);\n        //TODO: create a special jsfsFile class\n        //with a toString that returns the contents\n        //or better: mimic the File class of the browser\n        let result = {\n            type: this.#getMimetype(response),\n            name: Path.filename(path),\n            http: {\n                headers: response.headers,\n                status: response.status,\n                url: response.url\n            }\n        }\n        if (result.type.match(/text\\/.*/)) {\n            result.contents = await response.text()\n        } else if (result.type.match(/application\\/json.*/)) {\n            result.contents = await response.json()\n        } else {\n            result.contents = await response.blob()\n        }\n        return result\n    }\n\n    readStream(path, reader) {\n        throw new Error('Not yet implemented')\n    }\n\n    async exists(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'HEAD'\n        });\n        return this.#fetch(path, params);\n    }\n\n    async delete(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'DELETE'\n        });\n        return this.#fetch(path, params);\n    }\n\n    async list(path) {\n        let supportedContentTypes = [\n            'text/html','text/xhtml','text/xhtml+xml','text/xml'\n        ];\n        let result = await this.read(path)\n        if (supportedContentTypes.includes(result.type.split(';')[0])) {\n            var html = result.contents\n        } else {\n            let url = this.#getUrl(path);\n            throw new TypeError('URL '+url+' is not of a supported content type', {\n                cause: result\n            });                \n        }\n\n        let basePath = Path.collapse(this.#baseUrl.pathname);\n        let parentUrl = this.#getUrl(path);\n        // TODO: use DOMParser() directly here\n        let dom = document.createElement('template');\n        dom.innerHTML = html;\n        let links = dom.content.querySelectorAll('a[href]');\n\n        return Array.from(links)\n        .map(link => {\n            // use getAttribute to get the unchanged href value\n            // otherwise relative hrefs will be turned into absolute values relative to the current window.location\n            // instead of the path used in list()\n            let url = new URL(link.getAttribute('href'), parentUrl.href); \n            link.href = url.href;\n            return {\n                filename: Path.filename(link.pathname),\n                path: link.pathname,\n                name: link.innerText,\n                href: link.href\n            }\n        })\n        .filter(link => {\n            // show only links that have the current URL as direct parent\n            let testURL = new URL(link.href)\n            testURL.pathname = Path.parent(testURL.pathname);\n            return testURL.href===parentUrl.href;\n        })\n        .map(link => {\n            return {\n                filename: link.filename,\n                path: link.path.substring(basePath.length-1), //TODO: Path.collapse() now always adds a trailing '/', so this works, but the added trailing / is probably not correct\n                name: link.name\n            }\n        })\n    }\n\n    #getUrl(path) {\n        path = Path.collapse(this.#baseUrl.pathname + Path.collapse(path));\n        return new URL(path, this.#baseUrl);\n    }\n\n    async #fetch(path, options) {\n        return fetch(this.#getUrl(path), options)\n        .catch(e => {\n            if (!this.#exceptionHandler || !this.#exceptionHandler(url, options, e)) {\n                throw e;\n            }\n        })\n    }\n\n    #getMimetype(response) {\n        if (response.headers.has('Content-Type')) {\n            return response.headers.get('Content-Type')\n        } else {\n            return null\n        }\n    }\n}\n\nconst supportsRequestStreams = (async () => {\n    const supportsStreamsInRequestObjects = !new Request(\n        '', \n        {\n            body: new ReadableStream(),\n            method: 'POST',\n            duplex: 'half' // required in chrome\n        }\n    )\n    .headers.has('Content-Type');\n\n    if (!supportsStreamsInRequestObjects) {\n        return false;\n    }\n\n    return fetch(\n        'data:a/a;charset=utf-8,', \n        {\n            method: 'POST',\n            body: new ReadableStream(),\n            duplex: 'half'\n        }\n    )\n    .then(() => true, () => false);\n})();", "import JSFS from './FileSystem.js'\nimport HttpAdapter from './Adapters/HttpAdapter.js'\nimport Path from './Path.js'\n\nconst jsfs = {\n\tfs: JSFS,\n\tadapters: {\n\t\thttps: HttpAdapter\n\t},\n\tpath: Path\n}\nwindow.jsfs = jsfs\n\nexport default jsfs"],
  "mappings": ";;AAAA,MAAqB,OAArB,MAAqB,MAAK;AAAA,IACtB;AAAA,IAEA,YAAY,MAAM;AACd,WAAK,SAAS,MAAK,SAAS,IAAI;AAAA,IACpC;AAAA,IAEA,IAAI,QAAQ;AACR,aAAO,KAAK;AAAA,IAChB;AAAA,IAEA,WAAW;AACP,aAAO,KAAK;AAAA,IAChB;AAAA,IAEA,IAAI,SAAS;AACT,aAAO,KAAK,OAAO;AAAA,IACvB;AAAA,IAEA,OAAO,SAAS,MAAM,MAAI,IAAI;AAC1B,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,UAAI,OAAO,SAAS,UAAW;AAC3B,cAAM,IAAI,UAAU,uDAAuD;AAAA,MAC/E;AACA,UAAI,OAAO,EAAE,eAAe,QAAO;AAC/B,cAAM,IAAI,MAAK,GAAG;AAAA,MACtB;AACA,aAAO,KAAK,KAAK;AACjB,UAAI,KAAK,WAAS,GAAG;AACjB,eAAO,IAAI;AAAA,MACf;AACA,UAAI,MAAK,WAAW,IAAI,GAAG;AACvB,eAAO,MAAI;AAAA,MACf;AACA,UAAI,YAAY,MAAK,OAAO,MAAM,CAACA,SAAQ,UAAU;AACjD,YAAI,SAAS,MAAO;AAChB,UAAAA,QAAO,IAAI;AAAA,QACf,WAAW,UAAU,KAAK;AACtB,UAAAA,QAAO,KAAK,KAAK;AAAA,QACrB;AACA,eAAOA;AAAA,MACX,GAAG,CAAC,CAAC;AACL,UAAI,SAAS;AACb,UAAI,UAAU,QAAQ;AAClB,kBAAU,UAAU,KAAK,GAAG;AAC5B,YAAI,MAAK,SAAS,IAAI,GAAG;AACrB,oBAAU;AAAA,QACd;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IAEA,OAAO,WAAW,MAAM;AACpB,UAAI,gBAAgB,OAAM;AACtB,eAAO;AAAA,MACX;AACA,aAAO,KAAK,UAAU,KAAK,CAAC,MAAI;AAAA,IACpC;AAAA,IAEA,OAAO,WAAW,MAAM;AACpB,aAAO,CAAC,MAAK,WAAW,IAAI;AAAA,IAChC;AAAA,IAEA,OAAO,SAAS,MAAM;AAClB,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,UAAU,KAAK,KAAK,SAAO,CAAC,KAAK;AAAA,IACjD;AAAA,IAEA,OAAO,OAAO,MAAM;AAChB,UAAI,gBAAgB,OAAM;AACtB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,SAAS,UAAU;AAC1B,eAAO;AAAA,MACX;AACA,aAAO,KAAK,KAAK;AACjB,UAAI,IAAI,IAAI,IAAI,MAAM,SAAS,QAAQ;AACvC,aAAO,EAAE,YAAY;AAAA,IACzB;AAAA,IAEA,OAAO,OAAO,MAAM,SAAS,SAAS;AAClC,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAAE,OAAO,SAAS,OAAO;AAAA,IAClE;AAAA,IAEA,OAAO,IAAI,MAAM,UAAU;AACvB,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAAE,IAAI,QAAQ;AAAA,IACvD;AAAA,IAEA,OAAO,OAAO,MAAM;AAChB,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO;AACrC,WAAK,IAAI;AACT,UAAI,SAAS;AACb,UAAI,KAAK,QAAQ;AACb,kBAAU,KAAK,KAAK,GAAG,IAAE;AAAA,MAC7B;AACA,aAAO;AAAA,IACX;AAAA,IAEA,OAAO,SAAS,MAAM;AAClB,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAAE,IAAI;AAAA,IAC/C;AAAA,IAEA,OAAO,KAAK,MAAM;AACd,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO,EAAE,MAAM;AAAA,IACjD;AAAA,IAEA,OAAO,KAAK,MAAM;AACd,UAAI,gBAAgB,OAAM;AACtB,eAAO,KAAK;AAAA,MAChB;AACA,aAAO,KAAK,MAAM,GAAG,EAAE,OAAO,OAAO;AACrC,WAAK,MAAM;AACX,UAAI,SAAS;AACb,UAAI,KAAK,QAAQ;AACb,kBAAU,KAAK,KAAK,GAAG,IAAE;AAAA,MAC7B;AACA,aAAO;AAAA,IACX;AAAA,EACJ;;;ACvIA,MAAqB,aAArB,MAAqB,YAAW;AAAA,IAE/B;AAAA,IACA,QAAQ;AAAA,IAER,YAAY,SAAS;AACpB,WAAK,WAAW;AAChB,WAAK,QAAQ,KAAK,SAAS;AAAA,IAC5B;AAAA,IAEA,IAAI,OAAO;AACV,aAAO,KAAK;AAAA,IACb;AAAA,IAEA,GAAG,MAAM;AACR,UAAI,EAAE,gBAAgB,OAAO;AAC5B,eAAO,IAAI,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,CAAC;AAAA,MAChD;AACA,aAAO,IAAI,YAAW,KAAK,SAAS,GAAG,IAAI,CAAC;AAAA,IAC7C;AAAA,IAEA,MAAM,KAAK,MAAM,SAAS,MAAM;AAC/B,UAAI,EAAE,gBAAgB,OAAO;AAC5B,eAAO,IAAI,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,CAAC;AAAA,MAChD;AACA,UAAI,OAAO,WAAW,YAAY;AACjC,YAAI,CAAC,KAAK,SAAS,sBAAsB,GAAG;AAC3C,gBAAM,IAAI,MAAM,aAAW,KAAK,SAAS,OAAK,sCAAsC;AAAA,QACrF;AACA,eAAO,KAAK,SAAS,WAAW,MAAM,MAAM;AAAA,MAC7C,OAAO;AACN,eAAO,KAAK,SAAS,KAAK,IAAI;AAAA,MAC/B;AAAA,IACD;AAAA,IAEA,MAAM,MAAM,MAAM,UAAU,WAAW,MAAM;AAC5C,UAAI,EAAE,gBAAgB,OAAO;AAC5B,eAAO,IAAI,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,CAAC;AAAA,MAChD;AACA,UAAI,CAAC,KAAK,SAAS,cAAc,GAAG;AACnC,cAAM,IAAI,MAAM,aAAW,KAAK,SAAS,OAAK,gBAAgB;AAAA,MAC/D;AACA,UAAI,OAAO,aAAa,YAAY;AACnC,YAAI,CAAC,KAAK,SAAS,uBAAuB,GAAG;AAC5C,gBAAM,IAAI,MAAM,aAAW,KAAK,SAAS,OAAK,sCAAsC;AAAA,QACrF;AACA,eAAO,KAAK,SAAS,YAAY,MAAM,UAAU,QAAQ;AAAA,MAC1D,WAAW,OAAO,aAAa,UAAU;AACxC,eAAO,KAAK,SAAS,MAAM,MAAM,UAAU,QAAQ;AAAA,MACpD,OAAO;AACN,cAAM,IAAI,UAAU,mCAAkC,OAAO,QAAS;AAAA,MACvE;AAAA,IACD;AAAA,IAEA,MAAM,OAAO,MAAM;AAClB,UAAI,EAAE,gBAAgB,OAAO;AAC5B,eAAO,IAAI,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,CAAC;AAAA,MAChD;AACA,aAAO,KAAK,SAAS,OAAO,IAAI;AAAA,IACjC;AAAA,IAEA,MAAM,OAAO,MAAM;AAClB,UAAI,EAAE,gBAAgB,OAAO;AAC5B,eAAO,IAAI,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,CAAC;AAAA,MAChD;AACA,aAAO,KAAK,SAAS,OAAO,IAAI;AAAA,IACjC;AAAA,IAEA,MAAM,KAAK,OAAK,IAAI;AACnB,UAAI,EAAE,gBAAgB,OAAO;AAC5B,eAAO,IAAI,KAAK,KAAK,SAAS,MAAM,KAAK,KAAK,CAAC;AAAA,MAChD;AACA,aAAO,KAAK,SAAS,KAAK,IAAI;AAAA,IAC/B;AAAA,EACD;;;AC1EA,MAAqB,cAArB,MAAqB,aAAY;AAAA,IAE7B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,YAAY,SAAS,OAAK,KAAK,mBAAiB,MAAM,cAAY,CAAC,GAAG;AAClE,WAAK,WAAW,IAAI,IAAI,SAAS,OAAO,SAAS,IAAI;AACrD,WAAK,QAAQ,IAAI,KAAK,IAAI;AAC1B,WAAK,oBAAoB;AACzB,WAAK,eAAe;AAAA,IACxB;AAAA,IAEA,IAAI,OAAO;AACP,aAAO;AAAA,IACX;AAAA,IAEA,IAAI,OAAO;AACP,aAAO,KAAK;AAAA,IAChB;AAAA,IAEA,gBAAgB;AACZ,aAAO;AAAA,IACX;AAAA,IAEA,yBAAyB;AACrB,aAAO;AAAA,IACX;AAAA,IAEA,wBAAwB;AACpB,aAAO;AAAA,IACX;AAAA,IAEA,GAAG,MAAM;AACL,UAAI,CAAC,KAAK,OAAO,IAAI,GAAG;AACpB,cAAM,IAAI,UAAU,OAAK,sBAAsB;AAAA,MACnD;AACA,aAAO,IAAI,aAAY,KAAK,SAAS,MAAM,IAAI;AAAA,IACnD;AAAA;AAAA,IAGA,MAAM,MAAM,MAAM,UAAU,WAAS,MAAM;AACvC,UAAI,SAAS,OAAO,OAAO,CAAC,GAAG,KAAK,cAAc;AAAA,QAC9C,QAAQ;AAAA,QACR,MAAM;AAAA,MACV,CAAC;AACD,aAAO,KAAK,OAAO,MAAM,MAAM;AAAA,IACnC;AAAA,IAEA,YAAY,MAAM,QAAQ,WAAS,MAAM;AACrC,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACzC;AAAA,IAEA,MAAM,KAAK,MAAM;AACb,UAAI,SAAS,OAAO,OAAO,CAAC,GAAG,KAAK,cAAc;AAAA,QAC9C,QAAQ;AAAA,MACZ,CAAC;AACD,UAAI,WAAW,MAAM,KAAK,OAAO,MAAM,MAAM;AAI7C,UAAI,SAAS;AAAA,QACT,MAAM,KAAK,aAAa,QAAQ;AAAA,QAChC,MAAM,KAAK,SAAS,IAAI;AAAA,QACxB,MAAM;AAAA,UACF,SAAS,SAAS;AAAA,UAClB,QAAQ,SAAS;AAAA,UACjB,KAAK,SAAS;AAAA,QAClB;AAAA,MACJ;AACA,UAAI,OAAO,KAAK,MAAM,UAAU,GAAG;AAC/B,eAAO,WAAW,MAAM,SAAS,KAAK;AAAA,MAC1C,WAAW,OAAO,KAAK,MAAM,qBAAqB,GAAG;AACjD,eAAO,WAAW,MAAM,SAAS,KAAK;AAAA,MAC1C,OAAO;AACH,eAAO,WAAW,MAAM,SAAS,KAAK;AAAA,MAC1C;AACA,aAAO;AAAA,IACX;AAAA,IAEA,WAAW,MAAM,QAAQ;AACrB,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACzC;AAAA,IAEA,MAAM,OAAO,MAAM;AACf,UAAI,SAAS,OAAO,OAAO,CAAC,GAAG,KAAK,cAAc;AAAA,QAC9C,QAAQ;AAAA,MACZ,CAAC;AACD,aAAO,KAAK,OAAO,MAAM,MAAM;AAAA,IACnC;AAAA,IAEA,MAAM,OAAO,MAAM;AACf,UAAI,SAAS,OAAO,OAAO,CAAC,GAAG,KAAK,cAAc;AAAA,QAC9C,QAAQ;AAAA,MACZ,CAAC;AACD,aAAO,KAAK,OAAO,MAAM,MAAM;AAAA,IACnC;AAAA,IAEA,MAAM,KAAK,MAAM;AACb,UAAI,wBAAwB;AAAA,QACxB;AAAA,QAAY;AAAA,QAAa;AAAA,QAAiB;AAAA,MAC9C;AACA,UAAI,SAAS,MAAM,KAAK,KAAK,IAAI;AACjC,UAAI,sBAAsB,SAAS,OAAO,KAAK,MAAM,GAAG,EAAE,CAAC,CAAC,GAAG;AAC3D,YAAI,OAAO,OAAO;AAAA,MACtB,OAAO;AACH,YAAIC,OAAM,KAAK,QAAQ,IAAI;AAC3B,cAAM,IAAI,UAAU,SAAOA,OAAI,uCAAuC;AAAA,UAClE,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AAEA,UAAI,WAAW,KAAK,SAAS,KAAK,SAAS,QAAQ;AACnD,UAAI,YAAY,KAAK,QAAQ,IAAI;AAEjC,UAAI,MAAM,SAAS,cAAc,UAAU;AAC3C,UAAI,YAAY;AAChB,UAAI,QAAQ,IAAI,QAAQ,iBAAiB,SAAS;AAElD,aAAO,MAAM,KAAK,KAAK,EACtB,IAAI,UAAQ;AAIT,YAAIA,OAAM,IAAI,IAAI,KAAK,aAAa,MAAM,GAAG,UAAU,IAAI;AAC3D,aAAK,OAAOA,KAAI;AAChB,eAAO;AAAA,UACH,UAAU,KAAK,SAAS,KAAK,QAAQ;AAAA,UACrC,MAAM,KAAK;AAAA,UACX,MAAM,KAAK;AAAA,UACX,MAAM,KAAK;AAAA,QACf;AAAA,MACJ,CAAC,EACA,OAAO,UAAQ;AAEZ,YAAI,UAAU,IAAI,IAAI,KAAK,IAAI;AAC/B,gBAAQ,WAAW,KAAK,OAAO,QAAQ,QAAQ;AAC/C,eAAO,QAAQ,SAAO,UAAU;AAAA,MACpC,CAAC,EACA,IAAI,UAAQ;AACT,eAAO;AAAA,UACH,UAAU,KAAK;AAAA,UACf,MAAM,KAAK,KAAK,UAAU,SAAS,SAAO,CAAC;AAAA;AAAA,UAC3C,MAAM,KAAK;AAAA,QACf;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEA,QAAQ,MAAM;AACV,aAAO,KAAK,SAAS,KAAK,SAAS,WAAW,KAAK,SAAS,IAAI,CAAC;AACjE,aAAO,IAAI,IAAI,MAAM,KAAK,QAAQ;AAAA,IACtC;AAAA,IAEA,MAAM,OAAO,MAAM,SAAS;AACxB,aAAO,MAAM,KAAK,QAAQ,IAAI,GAAG,OAAO,EACvC,MAAM,OAAK;AACR,YAAI,CAAC,KAAK,qBAAqB,CAAC,KAAK,kBAAkB,KAAK,SAAS,CAAC,GAAG;AACrE,gBAAM;AAAA,QACV;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IAEA,aAAa,UAAU;AACnB,UAAI,SAAS,QAAQ,IAAI,cAAc,GAAG;AACtC,eAAO,SAAS,QAAQ,IAAI,cAAc;AAAA,MAC9C,OAAO;AACH,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAEA,MAAM,0BAA0B,YAAY;AACxC,UAAM,kCAAkC,CAAC,IAAI;AAAA,MACzC;AAAA,MACA;AAAA,QACI,MAAM,IAAI,eAAe;AAAA,QACzB,QAAQ;AAAA,QACR,QAAQ;AAAA;AAAA,MACZ;AAAA,IACJ,EACC,QAAQ,IAAI,cAAc;AAE3B,QAAI,CAAC,iCAAiC;AAClC,aAAO;AAAA,IACX;AAEA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,QACI,QAAQ;AAAA,QACR,MAAM,IAAI,eAAe;AAAA,QACzB,QAAQ;AAAA,MACZ;AAAA,IACJ,EACC,KAAK,MAAM,MAAM,MAAM,KAAK;AAAA,EACjC,GAAG;;;AClMH,MAAM,OAAO;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,MACT,OAAO;AAAA,IACR;AAAA,IACA,MAAM;AAAA,EACP;AACA,SAAO,OAAO;AAEd,MAAO,kBAAQ;",
  "names": ["result", "url"]
}
