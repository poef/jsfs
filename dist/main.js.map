{"mappings":"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","sources":["src/browser.js","src/FileSystem.js","src/Path.js","src/Adapters/HttpAdapter.js"],"sourcesContent":["import JSFS from './FileSystem.js'\nimport HttpAdapter from './Adapters/HttpAdapter.js'\nimport Path from './Path.js'\n\nwindow.JSFS = JSFS\nwindow.jsfsHttpAdapter = HttpAdapter\nwindow.jsfsPath = Path","import Path from './Path.js';\n\n//TODO: there is no mkdir/rmdir, assumption is that\n//remote system will auto create directories on write\n//but this may not be feasible for all systems\n//rmdir is now covered by delete()\n\nexport default class FileSystem {\n\t\n\t#adapter;\n\t#path = '/';\n\n\tconstructor(adapter) {\n\t\tthis.#adapter = adapter\n\t\tthis.#path = this.#adapter.path;\n\t}\n\n\tget path() {\n\t\treturn this.#path;\n\t}\n\n\tcd(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn new FileSystem(this.#adapter.cd(path));\n\t}\n\n\tasync read(path, reader = null) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\tif (typeof reader === 'function') { // TODO support generator functions\n\t\t\tif (!this.#adapter.supportsStreamingRead()) {\n\t\t\t\tthrow new Error('Adapter '+this.#adapter.name+' does not support streaming reading.');\n\t\t\t}\n\t\t\treturn this.#adapter.readStream(path, reader);\n\t\t} else {\n\t\t\treturn this.#adapter.read(path);\n\t\t}\n\t}\n\n\tasync write(path, contents, metadata = null) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\tif (!this.#adapter.supportsWrite()) {\n\t\t\tthrow new Error('Adapter '+this.#adapter.name+' is read only.');\n\t\t}\n\t\tif (typeof contents === 'function') { // TODO: support generator functions\n\t\t\tif (!this.#adapter.supportsStreamingWrite()) {\n\t\t\t\tthrow new Error('Adapter '+this.#adapter.name+' does not support streaming writing.');\n\t\t\t}\n\t\t\treturn this.#adapter.writeStream(path, contents, metadata);\n\t\t} else if (typeof contents === 'string') {\n\t\t\treturn this.#adapter.write(path, contents, metadata);\n\t\t} else {\n\t\t\tthrow new TypeError('Cannot write contents of type '+(typeof contents));\n\t\t}\n\t}\n\n\tasync delete(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.delete(path);\n\t}\n\n\tasync exists(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.exists(path);\n\t}\n\n\tasync list(path='') {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.list(path);\n\t}\n}\n\n","export default class Path {\n    #value;\n\n    constructor(path) {\n        this.#value = Path.collapse(path);\n    }\n\n    get value() {\n        return this.#value;\n    }\n\n    toString() {\n        return this.#value;\n    }\n\n    get length() {\n        return this.#value.length;\n    }\n\n    static collapse(path, cwd='') {\n        if (path instanceof Path) {\n            return path.value;\n        }\n        if (typeof path !== 'string' ) {\n            throw new TypeError('path argument must be a string or an instance of Path');\n        }\n        if (cwd && !(cwd instanceof Path)) {\n            cwd = new Path(cwd);\n        }\n        path = path.trim();\n        if (path.length===0) {\n            return cwd.value;\n        }\n        if (Path.isRelative(path)) {\n            path = cwd+path;\n        }\n        let pathnames = Path.reduce(path, (result, entry) => {\n            if (entry == '..' ) {\n                result.pop();\n            } else if (entry !== '.') {\n                result.push(entry);\n            }\n            return result;\n        }, []);\n        let result = '/';\n        if (pathnames.length) {\n            result += pathnames.join('/');\n            if (Path.isFolder(path)) {\n                result += '/';\n            }\n        }\n        return result;\n    }\n\n    static isAbsolute(path) {\n        if (path instanceof Path) {\n            return true;\n        }\n        return path.length && path[0]==='/';\n    }\n\n    static isRelative(path) {\n        return !Path.isAbsolute(path);    \n    }\n\n    static isFolder(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.length && path[path.length-1] == '/';\n    }\n\n    static isPath(path) {\n        if (path instanceof Path) {\n            return true;\n        }\n        if (typeof path !== 'string') {\n            return false;\n        }\n        path = path.trim();\n        let u = new URL(path, document.location);\n        return u.pathname == path;\n    }\n\n    static reduce(path, reducer, initial) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).reduce(reducer, initial);\n    }\n\n    static map(path, callback) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).map(callback);\n    }\n\n    static parent(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        path = path.split('/').filter(Boolean);\n        path.pop();\n        let result = '/';\n        if (path.length) {\n            result += path.join('/')+'/';\n        }\n        return result;\n    }\n\n    static filename(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).pop();\n    }\n    \n    static head(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).shift();\n    }\n    \n    static tail(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        path = path.split('/').filter(Boolean)\n        path.shift();\n        let result = '/';\n        if (path.length) {\n            result += path.join('/')+'/';\n        }\n        return result;\n    }\n}","import Path from '../Path.js';\n\nexport default class HttpAdapter {\n    \n    #baseUrl;\n    #path;\n    #exceptionHandler;\n    #fetchParams;\n\n    constructor(baseUrl, path='/', exceptionHandler=null, fetchParams={}) {\n        this.#baseUrl = new URL(baseUrl, window.location.href);\n        this.#path = new Path(path);\n        this.#exceptionHandler = exceptionHandler;\n        this.#fetchParams = fetchParams;\n    }\n\n    get name() {\n        return 'HttpAdapter';\n    }\n\n    get path() {\n        return this.#path;\n    }\n\n    supportsWrite() {\n        return true;\n    }\n\n    supportsStreamingWrite() {\n        return supportsRequestStreams;\n    }\n\n    supportsStreamingRead() {\n        return true;\n    }\n\n    cd(path) {\n        if (!Path.isPath(path)) {\n            throw new TypeError(path+' is not a valid path');\n        }\n        return new HttpAdapter(this.#baseUrl.href, path);\n    }\n\n    //FIXME: return a jsfs result object instead of http response\n    async write(path, contents, metadata=null) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'PUT',\n            body: contents\n        });\n        return this.#fetch(path, params);\n    }\n\n    writeStream(path, writer, metadata=null) {\n        throw new Error('Not yet implemented')\n    }\n\n    async read(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'GET'\n        });\n        let response = await this.#fetch(path, params);\n        //TODO: create a special jsfsFile class\n        //with a toString that returns the contents\n        let result = {\n            type: this.#getMimetype(response),\n            name: Path.filename(path),\n            http: {\n                headers: response.headers,\n                status: response.status,\n                url: response.url\n            }\n        }\n        if (result.type.match(/text\\/.*/)) {\n            result.contents = await response.text()\n        } else if (result.type.match(/application\\/json.*/)) {\n            result.contents = await response.json()\n        } else {\n            result.contents = await response.blob()\n        }\n        return result\n    }\n\n    readStream(path, reader) {\n        throw new Error('Not yet implemented')\n    }\n\n    async exists(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'HEAD'\n        });\n        return this.#fetch(path, params);\n    }\n\n    async delete(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'DELETE'\n        });\n        return this.#fetch(path, params);\n    }\n\n    async list(path) {\n        let supportedContentTypes = [\n            'text/html','text/xhtml','text/xhtml+xml','text/xml'\n        ];\n        let result = await this.read(path)\n        if (supportedContentTypes.includes(result.type.split(';')[0])) {\n            var html = result.contents\n        } else {\n            let url = this.#getUrl(path);\n            throw new TypeError('URL '+url+' is not of a supported content type', {\n                cause: result\n            });                \n        }\n\n        let basePath = Path.collapse(this.#baseUrl.pathname);\n        let parentUrl = this.#getUrl(path);\n        // TODO: use DOMParser() directly here\n        let dom = document.createElement('template');\n        dom.innerHTML = html;\n        let links = dom.content.querySelectorAll('a[href]');\n\n        return Array.from(links)\n        .map(link => {\n            // use getAttribute to get the unchanged href value\n            // otherwise relative hrefs will be turned into absolute values relative to the current window.location\n            // instead of the path used in list()\n            let url = new URL(link.getAttribute('href'), parentUrl.href); \n            link.href = url.href;\n            return {\n                filename: Path.filename(link.pathname),\n                path: link.pathname,\n                name: link.innerText,\n                href: link.href\n            }\n        })\n        .filter(link => {\n            // show only links that have the current URL as direct parent\n            let testURL = new URL(link.href)\n            testURL.pathname = Path.parent(testURL.pathname);\n            return testURL.href===parentUrl.href;\n        })\n        .map(link => {\n            return {\n                filename: link.filename,\n                path: link.path.substring(basePath.length-1), //TODO: Path.collapse() now always adds a trailing '/', so this works, but the added trailing / is probably not correct\n                name: link.name\n            }\n        })\n    }\n\n    #getUrl(path) {\n        path = Path.collapse(this.#baseUrl.pathname + Path.collapse(path));\n        return new URL(path, this.#baseUrl);\n    }\n\n    async #fetch(path, options) {\n        return fetch(this.#getUrl(path), options)\n        .catch(e => {\n            if (!this.#exceptionHandler || !this.#exceptionHandler(url, options, e)) {\n                throw e;\n            }\n        })\n    }\n\n    #getMimetype(response) {\n        if (response.headers.has('Content-Type')) {\n            return response.headers.get('Content-Type')\n        } else {\n            return null\n        }\n    }\n}\n\nconst supportsRequestStreams = (async () => {\n    const supportsStreamsInRequestObjects = !new Request(\n        '', \n        {\n            body: new ReadableStream(),\n            method: 'POST',\n            duplex: 'half' // required in chrome\n        }\n    )\n    .headers.has('Content-Type');\n\n    if (!supportsStreamsInRequestObjects) {\n        return false;\n    }\n\n    return fetch(\n        'data:a/a;charset=utf-8,', \n        {\n            method: 'POST',\n            body: new ReadableStream(),\n        }\n    )\n    .then(() => true, () => false);\n})();"],"names":[],"version":3,"file":"main.js.map"}