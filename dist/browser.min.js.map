{
  "version": 3,
  "sources": ["../src/Path.js", "../src/FileSystem.js", "../src/Adapters/HttpAdapter.js", "../src/browser.js"],
  "sourcesContent": ["export default class Path {\n    #value;\n\n    constructor(path) {\n        this.#value = Path.collapse(path);\n    }\n\n    get value() {\n        return this.#value;\n    }\n\n    toString() {\n        return this.#value;\n    }\n\n    get length() {\n        return this.#value.length;\n    }\n\n    static collapse(path, cwd='') {\n        if (path instanceof Path) {\n            return path.value;\n        }\n        if (typeof path !== 'string' ) {\n            throw new TypeError('path argument must be a string or an instance of Path');\n        }\n        if (cwd && !(cwd instanceof Path)) {\n            cwd = new Path(cwd);\n        }\n        path = path.trim();\n        if (path.length===0) {\n            return cwd.value;\n        }\n        if (Path.isRelative(path)) {\n            path = cwd+path;\n        }\n        let pathnames = Path.reduce(path, (result, entry) => {\n            if (entry == '..' ) {\n                result.pop();\n            } else if (entry !== '.') {\n                result.push(entry);\n            }\n            return result;\n        }, []);\n        let result = '/';\n        if (pathnames.length) {\n            result += pathnames.join('/');\n            if (Path.isFolder(path)) {\n                result += '/';\n            }\n        }\n        return result;\n    }\n\n    static isAbsolute(path) {\n        if (path instanceof Path) {\n            return true;\n        }\n        return path.length && path[0]==='/';\n    }\n\n    static isRelative(path) {\n        return !Path.isAbsolute(path);    \n    }\n\n    static isFolder(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.length && path[path.length-1] == '/';\n    }\n\n    static isPath(path) {\n        if (path instanceof Path) {\n            return true;\n        }\n        if (typeof path !== 'string') {\n            return false;\n        }\n        path = path.trim();\n        let u = new URL(path, document.location);\n        return u.pathname == path;\n    }\n\n    static reduce(path, reducer, initial) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).reduce(reducer, initial);\n    }\n\n    static map(path, callback) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).map(callback);\n    }\n\n    static parent(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        path = path.split('/').filter(Boolean);\n        path.pop();\n        let result = '/';\n        if (path.length) {\n            result += path.join('/')+'/';\n        }\n        return result;\n    }\n\n    static filename(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).pop();\n    }\n    \n    static head(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        return path.split('/').filter(Boolean).shift();\n    }\n    \n    static tail(path) {\n        if (path instanceof Path) {\n            path = path.value;\n        }\n        path = path.split('/').filter(Boolean)\n        path.shift();\n        let result = '/';\n        if (path.length) {\n            result += path.join('/')+'/';\n        }\n        return result;\n    }\n}", "import Path from './Path.js';\n\nexport default class FileSystem {\n\t\n\t#adapter;\n\t#path = '/';\n\n\tconstructor(adapter) {\n\t\tthis.#adapter = adapter\n\t\tthis.#path = this.#adapter.path;\n\t}\n\n\tget path() {\n\t\treturn this.#path;\n\t}\n\n\tcd(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn new FileSystem(this.#adapter.cd(path));\n\t}\n\n\tasync read(path, reader = null) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\tif (typeof reader === 'function') {\n\t\t\tif (!this.#adapter.supportsStreamingRead()) {\n\t\t\t\tthrow new Error('Adapter '+this.#adapter.name+' does not support streaming reading.');\n\t\t\t}\n\t\t\treturn this.#adapter.readStream(path, reader);\n\t\t} else {\n\t\t\treturn this.#adapter.read(path);\n\t\t}\n\t}\n\n\tasync write(path, contents, metadata = null) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\tif (!this.#adapter.supportsWrite()) {\n\t\t\tthrow new Error('Adapter '+this.#adapter.name+' is read only.');\n\t\t}\n\t\tif (typeof contents === 'function') {\n\t\t\tif (!this.#adapter.supportsStreamingWrite()) {\n\t\t\t\tthrow new Error('Adapter '+this.#adapter.name+' does not support streaming writing.');\n\t\t\t}\n\t\t\treturn this.#adapter.writeStream(path, contents, metadata);\n\t\t} else if (typeof contents === 'string') {\n\t\t\treturn this.#adapter.write(path, contents, metadata);\n\t\t} else {\n\t\t\tthrow new TypeError('Cannot write contents of type '+(typeof contents));\n\t\t}\n\t}\n\n\tasync delete(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.delete(path);\n\t}\n\n\tasync exists(path) {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.exists(path);\n\t}\n\n\tasync list(path='') {\n\t\tif (!(path instanceof Path)) {\n\t\t\tpath = new Path(Path.collapse(path, this.#path));\n\t\t}\n\t\treturn this.#adapter.list(path);\n\t}\n}\n\n", "import Path from '../Path.js';\n\nexport default class HttpAdapter {\n    \n    #baseUrl;\n    #path;\n    #exceptionHandler;\n    #fetchParams;\n\n    constructor(baseUrl, path='/', exceptionHandler=null, fetchParams={}) {\n        this.#baseUrl = new URL(baseUrl, window.location.href);\n        this.#path = new Path(path);\n        this.#exceptionHandler = exceptionHandler;\n        this.#fetchParams = fetchParams;\n    }\n\n    get name() {\n        return 'HttpAdapter';\n    }\n\n    get path() {\n        return this.#path;\n    }\n\n    supportsWrite() {\n        return true;\n    }\n\n    supportsStreamingWrite() {\n        return supportsRequestStreams;\n    }\n\n    supportsStreamingRead() {\n        return true;\n    }\n\n    cd(path) {\n        if (!Path.isPath(path)) {\n            throw new TypeError(path+' is not a valid path');\n        }\n        return new HttpAdapter(this.#baseUrl.href, path);\n    }\n\n    //FIXME: return a jsfs result object instead of http response\n    async write(path, contents, metadata=null) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'PUT',\n            body: contents\n        });\n        return this.#fetch(path, params);\n    }\n\n    writeStream(path, writer, metadata=null) {\n        throw new Error('Not yet implemented')\n    }\n\n    async read(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'GET'\n        });\n        let response = await this.#fetch(path, params);\n        //TODO: create a special jsfsFile class\n        //with a toString that returns the contents\n        //or better: mimic the File class of the browser\n        let result = {\n            type: this.#getMimetype(response),\n            name: Path.filename(path),\n            http: {\n                headers: response.headers,\n                status: response.status,\n                url: response.url\n            }\n        }\n        if (result.type.match(/text\\/.*/)) {\n            result.contents = await response.text()\n        } else if (result.type.match(/application\\/json.*/)) {\n            result.contents = await response.json()\n        } else {\n            result.contents = await response.blob()\n        }\n        return result\n    }\n\n    readStream(path, reader) {\n        throw new Error('Not yet implemented')\n    }\n\n    async exists(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'HEAD'\n        });\n        return this.#fetch(path, params);\n    }\n\n    async delete(path) {\n        let params = Object.assign({}, this.#fetchParams, {\n            method: 'DELETE'\n        });\n        return this.#fetch(path, params);\n    }\n\n    async list(path) {\n        let supportedContentTypes = [\n            'text/html','text/xhtml','text/xhtml+xml','text/xml'\n        ];\n        let result = await this.read(path)\n        if (supportedContentTypes.includes(result.type.split(';')[0])) {\n            var html = result.contents\n        } else {\n            let url = this.#getUrl(path);\n            throw new TypeError('URL '+url+' is not of a supported content type', {\n                cause: result\n            });                \n        }\n\n        let basePath = Path.collapse(this.#baseUrl.pathname);\n        let parentUrl = this.#getUrl(path);\n        // TODO: use DOMParser() directly here\n        let dom = document.createElement('template');\n        dom.innerHTML = html;\n        let links = dom.content.querySelectorAll('a[href]');\n\n        return Array.from(links)\n        .map(link => {\n            // use getAttribute to get the unchanged href value\n            // otherwise relative hrefs will be turned into absolute values relative to the current window.location\n            // instead of the path used in list()\n            let url = new URL(link.getAttribute('href'), parentUrl.href); \n            link.href = url.href;\n            return {\n                filename: Path.filename(link.pathname),\n                path: link.pathname,\n                name: link.innerText,\n                href: link.href\n            }\n        })\n        .filter(link => {\n            // show only links that have the current URL as direct parent\n            let testURL = new URL(link.href)\n            testURL.pathname = Path.parent(testURL.pathname);\n            return testURL.href===parentUrl.href;\n        })\n        .map(link => {\n            return {\n                filename: link.filename,\n                path: link.path.substring(basePath.length-1), //TODO: Path.collapse() now always adds a trailing '/', so this works, but the added trailing / is probably not correct\n                name: link.name\n            }\n        })\n    }\n\n    #getUrl(path) {\n        path = Path.collapse(this.#baseUrl.pathname + Path.collapse(path));\n        return new URL(path, this.#baseUrl);\n    }\n\n    async #fetch(path, options) {\n        return fetch(this.#getUrl(path), options)\n        .catch(e => {\n            if (!this.#exceptionHandler || !this.#exceptionHandler(url, options, e)) {\n                throw e;\n            }\n        })\n    }\n\n    #getMimetype(response) {\n        if (response.headers.has('Content-Type')) {\n            return response.headers.get('Content-Type')\n        } else {\n            return null\n        }\n    }\n}\n\nconst supportsRequestStreams = (async () => {\n    const supportsStreamsInRequestObjects = !new Request(\n        '', \n        {\n            body: new ReadableStream(),\n            method: 'POST',\n            duplex: 'half' // required in chrome\n        }\n    )\n    .headers.has('Content-Type');\n\n    if (!supportsStreamsInRequestObjects) {\n        return false;\n    }\n\n    return fetch(\n        'data:a/a;charset=utf-8,', \n        {\n            method: 'POST',\n            body: new ReadableStream(),\n            duplex: 'half'\n        }\n    )\n    .then(() => true, () => false);\n})();", "import JSFS from './FileSystem.js'\nimport HttpAdapter from './Adapters/HttpAdapter.js'\nimport Path from './Path.js'\n\nconst jsfs = {\n\tfs: JSFS,\n\tadapters: {\n\t\thttps: HttpAdapter\n\t},\n\tpath: Path\n}\nwindow.jsfs = jsfs\n\nexport default jsfs"],
  "mappings": "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",
  "names": ["Path", "_Path", "#value", "path", "cwd", "pathnames", "result", "entry", "reducer", "initial", "callback", "FileSystem", "_FileSystem", "#adapter", "#path", "adapter", "path", "Path", "reader", "contents", "metadata", "HttpAdapter", "_HttpAdapter", "#baseUrl", "#path", "#exceptionHandler", "#fetchParams", "baseUrl", "path", "exceptionHandler", "fetchParams", "Path", "supportsRequestStreams", "contents", "metadata", "params", "#fetch", "writer", "response", "result", "#getMimetype", "reader", "supportedContentTypes", "html", "url", "#getUrl", "basePath", "parentUrl", "dom", "links", "link", "testURL", "options", "e", "jsfs", "FileSystem", "HttpAdapter", "Path", "browser_default"]
}
